iddFun_i <- allModels$iddFun[i]
simNumber_i <- allModels$simNumber[i]
maxInf_i <- allModels$maxInf[i]
datGen_i <- allModels$datGen[i]
print(paste0('IDD Fun: ', iddFun_i,
', data gen: ', datGen_i,
', max inf: ', maxInf_i,
', sim number: ', simNumber_i))
############################################################################
### set up data
# load data
dat <- readRDS(paste0('data/', datGen_i, '_data.rds'))
# extract data for simulation of interest
Istar <- dat$Istar[,simNumber_i]
Estar <- dat$Estar[,simNumber_i]
# trim/add to Istar and Estar in the case of excess 0's
fullTime <- length(Istar)
lastInfTime <- max(which(Istar > 0))
if (lastInfTime + maxInf_i <= fullTime) {
newTime <- lastInfTime + maxInf_i
Istar <- Istar[1:newTime]
Estar <- Estar[1:newTime]
} else {
zerosAdd <- lastInfTime + maxInf_i - fullTime
Istar <- c(Istar, rep(0, zerosAdd))
Estar <- c(Estar, rep(0, zerosAdd))
newTime <- length(Istar)
}
# design matrix for intervention
X <- getX(newTime, tstar)
datList <- list(Istar = Istar,
Estar = Estar,
S0 = S0,
E0 = E0,
I0 = I0,
N = N)
############################################################################
### run three chains in parallel
cl <- makeCluster(3, outfile="")
clusterExport(cl, list('datList',  'X', 'iddFun_i', 'datGen_i',
'maxInf_i', 'i'))
resThree <- parLapplyLB(cl, X = 1:3, fun = function(clIdx) {
library(BayesSEIR)
library(splines)
# MCMC specifications
niter <- 1e6
nburn <- 2e5
# set seed for reproducibility of initial values
set.seed(clIdx + i)
# get priors and initial values based on model/data generating scenario
source('get_priors_inits.R')
priorsInits <- get_priors_inits(infPeriodSpec = 'IDD',
iddFun = iddFun_i,
datGen = datGen_i,
maxInf = maxInf_i)
initsList<- priorsInits$initsList
priorList<- priorsInits$priorList
res <- mcmcSEIR(dat = datList, X = X,
inits = initsList,
niter = niter, nburn = nburn,
infPeriodSpec = 'IDD',
priors = priorList,
iddFun = iddFun_i, maxInf = maxInf_i,
EKnown = TRUE, seed = clIdx)
list(fullPost = res)
})
stopCluster(cl)
### post processing to get Gelman-Rubin and IDD curve estimates
postSummaries <- post_processing(modelOutput = resThree, EType = 'known',
infPeriodSpec = "IDD",
datGen = datGen_i, iddFun = iddFun_i,
simNumber = simNumber_i, maxInf = maxInf_i,
X = X, N = N)
postSummaries$gdiag
par(mfrow = c(2,3))
plot(resThree[[1]]$fullPost[,'beta1'], type = 'l')
lines(resThree[[2]]$fullPost[,'beta1'], col = 'red')
lines(resThree[[3]]$fullPost[,'beta1'], col = 'blue')
plot(resThree[[1]]$fullPost[,'beta2'], type = 'l')
lines(resThree[[2]]$fullPost[,'beta2'], col = 'red')
lines(resThree[[3]]$fullPost[,'beta2'], col = 'blue')
plot(resThree[[1]]$fullPost[,'shape'], type = 'l')
lines(resThree[[2]]$fullPost[,'shape'], col = 'red')
lines(resThree[[3]]$fullPost[,'shape'], col = 'blue')
plot(resThree[[1]]$fullPost[,'rate'], type = 'l')
lines(resThree[[2]]$fullPost[,'rate'], col = 'red')
lines(resThree[[3]]$fullPost[,'rate'], col = 'blue')
plot(resThree[[1]]$fullPost[,'rateE'], type = 'l')
lines(resThree[[2]]$fullPost[,'rateE'], col = 'red')
lines(resThree[[3]]$fullPost[,'rateE'], col = 'blue')
postSummaries$gdiag
which(allModels$datGen == 'IDD_exp' & allModels$iddFun == 'dgammaIDD')
keepIdx <- seq(1, nrow(resThree[[1]]$fullPost), 100)
par(mfrow = c(2,3))
plot(resThree[[1]]$fullPost[keepIdx,'beta1'], type = 'l')
lines(resThree[[2]]$fullPost[keepIdx,'beta1'], col = 'red')
lines(resThree[[3]]$fullPost[keepIdx,'beta1'], col = 'blue')
plot(resThree[[1]]$fullPost[keepIdx,'beta2'], type = 'l')
lines(resThree[[2]]$fullPost[keepIdx,'beta2'], col = 'red')
lines(resThree[[3]]$fullPost[keepIdx,'beta2'], col = 'blue')
plot(resThree[[1]]$fullPost[keepIdx,'shape'], type = 'l')
lines(resThree[[2]]$fullPost[keepIdx,'shape'], col = 'red')
lines(resThree[[3]]$fullPost[keepIdx,'shape'], col = 'blue')
plot(resThree[[1]]$fullPost[keepIdx,'rate'], type = 'l')
lines(resThree[[2]]$fullPost[keepIdx,'rate'], col = 'red')
lines(resThree[[3]]$fullPost[keepIdx,'rate'], col = 'blue')
plot(resThree[[1]]$fullPost[keepIdx,'rateE'], type = 'l')
lines(resThree[[2]]$fullPost[keepIdx,'rateE'], col = 'red')
lines(resThree[[3]]$fullPost[keepIdx,'rateE'], col = 'blue')
i <- 201
iddFun_i <- allModels$iddFun[i]
simNumber_i <- allModels$simNumber[i]
maxInf_i <- allModels$maxInf[i]
datGen_i <- allModels$datGen[i]
print(paste0('IDD Fun: ', iddFun_i,
', data gen: ', datGen_i,
', max inf: ', maxInf_i,
', sim number: ', simNumber_i))
### load libraries
library(parallel)
library(coda)
library(splines)
library(BayesSEIR)
source('../helper_functions.R')
source('post_processing.R')
# create data frame of all possible models to be fit
maxInfs <- c(15, 20)
nSim <- 100
modelsGamma <- expand.grid(iddFun = 'dgammaIDD',
simNumber = 1:nSim,
maxInf = maxInfs,
datGen = c('IDD_peak', 'IDD_exp'),
stringsAsFactors = FALSE)
modelsLognormal <- expand.grid(iddFun = 'dlnormIDD',
simNumber = 1:nSim,
maxInf = maxInfs,
datGen = c('IDD_peak', 'IDD_exp'),
stringsAsFactors = FALSE)
modelsLogit <- expand.grid(iddFun = 'logitIDD',
simNumber = 1:nSim,
maxInf = maxInfs,
datGen = 'IDD_logit',
stringsAsFactors = FALSE)
modelsSpline <- expand.grid(iddFun = 'splineIDD',
simNumber = 1:nSim,
maxInf = maxInfs,
datGen = c('IDD_peak', 'IDD_exp', 'IDD_logit'),
stringsAsFactors = FALSE)
# 1600 models to be fit
allModels <- rbind.data.frame(modelsGamma,
modelsLognormal,
modelsLogit,
modelsSpline)
# model specifications that are the same for all models
N <- 5363500
E0 <- 1
I0 <- 0
S0 <- N - E0 - I0
# intervention time
tstar <- 120
iddFun_i <- allModels$iddFun[i]
simNumber_i <- allModels$simNumber[i]
maxInf_i <- allModels$maxInf[i]
datGen_i <- allModels$datGen[i]
print(paste0('IDD Fun: ', iddFun_i,
', data gen: ', datGen_i,
', max inf: ', maxInf_i,
', sim number: ', simNumber_i))
############################################################################
### set
# load data
dat <- readRDS(paste0('data/', datGen_i, '_data.rds'))
# extract data for simulation of interest
Istar <- dat$Istar[,simNumber_i]
Estar <- dat$Estar[,simNumber_i]
# trim/add to Istar and Estar in the case of excess 0's
fullTime <- length(Istar)
lastInfTime <- max(which(Istar > 0))
if (lastInfTime + maxInf_i <= fullTime) {
newTime <- lastInfTime + maxInf_i
Istar <- Istar[1:newTime]
Estar <- Estar[1:newTime]
} else {
zerosAdd <- lastInfTime + maxInf_i - fullTime
Istar <- c(Istar, rep(0, zerosAdd))
Estar <- c(Estar, rep(0, zerosAdd))
newTime <- length(Istar)
}
# design matrix for intervention
X <- getX(newTime, tstar)
datList <- list(Istar = Istar,
Estar = Estar,
S0 = S0,
E0 = E0,
I0 = I0,
N = N)
############################################################################
### run three chains in parallel
cl <- makeCluster(3, outfile="")
clusterExport(cl, list('datList',  'X', 'iddFun_i', 'datGen_i',
'maxInf_i', 'i'))
resThree <- parLapplyLB(cl, X = 1:3, fun = function(clIdx) {
library(BayesSEIR)
library(splines)
# MCMC specifications
niter <- 1e6
nburn <- 2e5
# set seed for reproducibility of initial values
set.seed(clIdx + i)
# get priors and initial values based on model/data generating scenario
source('get_priors_inits.R')
priorsInits <- get_priors_inits(infPeriodSpec = 'IDD',
iddFun = iddFun_i,
datGen = datGen_i,
maxInf = maxInf_i)
initsList<- priorsInits$initsList
priorList<- priorsInits$priorList
res <- mcmcSEIR(dat = datList, X = X,
inits = initsList,
niter = niter, nburn = nburn,
infPeriodSpec = 'IDD',
priors = priorList,
iddFun = iddFun_i, maxInf = maxInf_i,
EKnown = TRUE, seed = clIdx)
list(fullPost = res)
})
stopCluster(cl)
### post processing to get Gelman-Rubin and IDD curve estimates
postSummaries <- post_processing(modelOutput = resThree, EType = 'known',
infPeriodSpec = "IDD",
datGen = datGen_i, iddFun = iddFun_i,
simNumber = simNumber_i, maxInf = maxInf_i,
X = X, N = N)
postSummaries$gdiag
keepIdx <- seq(1, nrow(resThree[[1]]$fullPost), 100)
par(mfrow = c(2,3))
plot(resThree[[1]]$fullPost[keepIdx,'beta1'], type = 'l')
lines(resThree[[2]]$fullPost[keepIdx,'beta1'], col = 'red')
lines(resThree[[3]]$fullPost[keepIdx,'beta1'], col = 'blue')
plot(resThree[[1]]$fullPost[keepIdx,'beta2'], type = 'l')
lines(resThree[[2]]$fullPost[keepIdx,'beta2'], col = 'red')
lines(resThree[[3]]$fullPost[keepIdx,'beta2'], col = 'blue')
plot(resThree[[1]]$fullPost[keepIdx,'shape'], type = 'l')
lines(resThree[[2]]$fullPost[keepIdx,'shape'], col = 'red')
lines(resThree[[3]]$fullPost[keepIdx,'shape'], col = 'blue')
plot(resThree[[1]]$fullPost[keepIdx,'rate'], type = 'l')
lines(resThree[[2]]$fullPost[keepIdx,'rate'], col = 'red')
lines(resThree[[3]]$fullPost[keepIdx,'rate'], col = 'blue')
plot(resThree[[1]]$fullPost[keepIdx,'rateE'], type = 'l')
lines(resThree[[2]]$fullPost[keepIdx,'rateE'], col = 'red')
lines(resThree[[3]]$fullPost[keepIdx,'rateE'], col = 'blue')
postSummaries$gdiag
setwd("C:/Users/caitl/Documents/IDDPaper/IDD_Paper/simulation_study")
i <- 207
### load libraries
library(parallel)
library(coda)
library(splines)
library(BayesSEIR)
source('../helper_functions.R')
source('post_processing.R')
# create data frame of all possible models to be fit
maxInfs <- c(15, 20)
nSim <- 100
modelsGamma <- expand.grid(iddFun = 'dgammaIDD',
simNumber = 1:nSim,
maxInf = maxInfs,
datGen = c('IDD_peak', 'IDD_exp'),
stringsAsFactors = FALSE)
modelsLognormal <- expand.grid(iddFun = 'dlnormIDD',
simNumber = 1:nSim,
maxInf = maxInfs,
datGen = c('IDD_peak', 'IDD_exp'),
stringsAsFactors = FALSE)
modelsLogit <- expand.grid(iddFun = 'logitIDD',
simNumber = 1:nSim,
maxInf = maxInfs,
datGen = 'IDD_logit',
stringsAsFactors = FALSE)
modelsSpline <- expand.grid(iddFun = 'splineIDD',
simNumber = 1:nSim,
maxInf = maxInfs,
datGen = c('IDD_peak', 'IDD_exp', 'IDD_logit'),
stringsAsFactors = FALSE)
# 1600 models to be fit
allModels <- rbind.data.frame(modelsGamma,
modelsLognormal,
modelsLogit,
modelsSpline)
# model specifications that are the same for all models
N <- 5363500
E0 <- 1
I0 <- 0
S0 <- N - E0 - I0
# intervention time
tstar <- 120
iddFun_i <- allModels$iddFun[i]
simNumber_i <- allModels$simNumber[i]
maxInf_i <- allModels$maxInf[i]
datGen_i <- allModels$datGen[i]
print(paste0('IDD Fun: ', iddFun_i,
', data gen: ', datGen_i,
', max inf: ', maxInf_i,
', sim number: ', simNumber_i))
############################################################################
### set up data
# load data
dat <- readRDS(paste0('data/', datGen_i, '_data.rds'))
# extract data for simulation of interest
Istar <- dat$Istar[,simNumber_i]
Estar <- dat$Estar[,simNumber_i]
# trim/add to Istar and Estar in the case of excess 0's
fullTime <- length(Istar)
lastInfTime <- max(which(Istar > 0))
if (lastInfTime + maxInf_i <= fullTime) {
newTime <- lastInfTime + maxInf_i
Istar <- Istar[1:newTime]
Estar <- Estar[1:newTime]
} else {
zerosAdd <- lastInfTime + maxInf_i - fullTime
Istar <- c(Istar, rep(0, zerosAdd))
Estar <- c(Estar, rep(0, zerosAdd))
newTime <- length(Istar)
}
# design matrix for intervention
X <- getX(newTime, tstar)
datList <- list(Istar = Istar,
Estar = Estar,
S0 = S0,
E0 = E0,
I0 = I0,
N = N)
############################################################################
### run three chains in parallel
cl <- makeCluster(3, outfile="")
clusterExport(cl, list('datList',  'X', 'iddFun_i', 'datGen_i',
'maxInf_i', 'i'))
resThree <- parLapplyLB(cl, X = 1:3, fun = function(clIdx) {
library(BayesSEIR)
library(splines)
# MCMC specifications
niter <- 1e6
nburn <- 2e5
# set seed for reproducibility of initial values
set.seed(clIdx + i)
# get priors and initial values based on model/data generating scenario
source('get_priors_inits.R')
priorsInits <- get_priors_inits(infPeriodSpec = 'IDD',
iddFun = iddFun_i,
datGen = datGen_i,
maxInf = maxInf_i)
initsList<- priorsInits$initsList
priorList<- priorsInits$priorList
res <- mcmcSEIR(dat = datList, X = X,
inits = initsList,
niter = niter, nburn = nburn,
infPeriodSpec = 'IDD',
priors = priorList,
iddFun = iddFun_i, maxInf = maxInf_i,
EKnown = TRUE, seed = clIdx)
list(fullPost = res)
})
stopCluster(cl)
### post processing to get Gelman-Rubin and IDD curve estimates
postSummaries <- post_processing(modelOutput = resThree, EType = 'known',
infPeriodSpec = "IDD",
datGen = datGen_i, iddFun = iddFun_i,
simNumber = simNumber_i, maxInf = maxInf_i,
X = X, N = N)
keepIdx <- seq(1, nrow(resThree[[1]]$fullPost), 100)
par(mfrow = c(2,3))
plot(resThree[[1]]$fullPost[keepIdx,'beta1'], type = 'l')
lines(resThree[[2]]$fullPost[keepIdx,'beta1'], col = 'red')
lines(resThree[[3]]$fullPost[keepIdx,'beta1'], col = 'blue')
plot(resThree[[1]]$fullPost[keepIdx,'beta2'], type = 'l')
lines(resThree[[2]]$fullPost[keepIdx,'beta2'], col = 'red')
lines(resThree[[3]]$fullPost[keepIdx,'beta2'], col = 'blue')
plot(resThree[[1]]$fullPost[keepIdx,'shape'], type = 'l')
lines(resThree[[2]]$fullPost[keepIdx,'shape'], col = 'red')
lines(resThree[[3]]$fullPost[keepIdx,'shape'], col = 'blue')
plot(resThree[[1]]$fullPost[keepIdx,'rate'], type = 'l')
lines(resThree[[2]]$fullPost[keepIdx,'rate'], col = 'red')
lines(resThree[[3]]$fullPost[keepIdx,'rate'], col = 'blue')
plot(resThree[[1]]$fullPost[keepIdx,'rateE'], type = 'l')
lines(resThree[[2]]$fullPost[keepIdx,'rateE'], col = 'red')
lines(resThree[[3]]$fullPost[keepIdx,'rateE'], col = 'blue')
postSummaries$gdiag
i
############################################################################
### run three chains in parallel
cl <- makeCluster(3, outfile="")
clusterExport(cl, list('datList',  'X', 'iddFun_i', 'datGen_i',
'maxInf_i', 'i'))
resThree <- parLapplyLB(cl, X = 1:3, fun = function(clIdx) {
library(BayesSEIR)
library(splines)
# MCMC specifications
niter <- 1.2e6
nburn <- 2e5
# set seed for reproducibility of initial values
set.seed(clIdx + i)
# get priors and initial values based on model/data generating scenario
source('get_priors_inits.R')
priorsInits <- get_priors_inits(infPeriodSpec = 'IDD',
iddFun = iddFun_i,
datGen = datGen_i,
maxInf = maxInf_i)
initsList<- priorsInits$initsList
priorList<- priorsInits$priorList
res <- mcmcSEIR(dat = datList, X = X,
inits = initsList,
niter = niter, nburn = nburn,
infPeriodSpec = 'IDD',
priors = priorList,
iddFun = iddFun_i, maxInf = maxInf_i,
EKnown = TRUE, seed = clIdx)
list(fullPost = res)
})
stopCluster(cl)
### post processing to get Gelman-Rubin and IDD curve estimates
postSummaries <- post_processing(modelOutput = resThree, EType = 'known',
infPeriodSpec = "IDD",
datGen = datGen_i, iddFun = iddFun_i,
simNumber = simNumber_i, maxInf = maxInf_i,
X = X, N = N)
postSummaries$gdiag
keepIdx <- seq(1, nrow(resThree[[1]]$fullPost), 100)
par(mfrow = c(2,3))
plot(resThree[[1]]$fullPost[keepIdx,'beta1'], type = 'l')
lines(resThree[[2]]$fullPost[keepIdx,'beta1'], col = 'red')
lines(resThree[[3]]$fullPost[keepIdx,'beta1'], col = 'blue')
plot(resThree[[1]]$fullPost[keepIdx,'beta2'], type = 'l')
lines(resThree[[2]]$fullPost[keepIdx,'beta2'], col = 'red')
lines(resThree[[3]]$fullPost[keepIdx,'beta2'], col = 'blue')
plot(resThree[[1]]$fullPost[keepIdx,'shape'], type = 'l')
lines(resThree[[2]]$fullPost[keepIdx,'shape'], col = 'red')
lines(resThree[[3]]$fullPost[keepIdx,'shape'], col = 'blue')
plot(resThree[[1]]$fullPost[keepIdx,'rate'], type = 'l')
lines(resThree[[2]]$fullPost[keepIdx,'rate'], col = 'red')
lines(resThree[[3]]$fullPost[keepIdx,'rate'], col = 'blue')
plot(resThree[[1]]$fullPost[keepIdx,'rateE'], type = 'l')
lines(resThree[[2]]$fullPost[keepIdx,'rateE'], col = 'red')
lines(resThree[[3]]$fullPost[keepIdx,'rateE'], col = 'blue')
plot(resThree[[1]]$fullPost[keepIdx,'beta1'], type = 'l')
lines(resThree[[2]]$fullPost[keepIdx,'beta1'], col = 'red')
lines(resThree[[3]]$fullPost[keepIdx,'beta1'], col = 'blue')
plot(resThree[[1]]$fullPost[keepIdx,'beta2'], type = 'l')
lines(resThree[[2]]$fullPost[keepIdx,'beta2'], col = 'red')
lines(resThree[[3]]$fullPost[keepIdx,'beta2'], col = 'blue')
plot(resThree[[1]]$fullPost[keepIdx,'shape'], type = 'l')
lines(resThree[[2]]$fullPost[keepIdx,'shape'], col = 'red')
lines(resThree[[3]]$fullPost[keepIdx,'shape'], col = 'blue')
plot(resThree[[1]]$fullPost[keepIdx,'rate'], type = 'l')
lines(resThree[[2]]$fullPost[keepIdx,'rate'], col = 'red')
lines(resThree[[3]]$fullPost[keepIdx,'rate'], col = 'blue')
postSummaries$gdiag
############################################################################
### run three chains in parallel
cl <- makeCluster(3, outfile="")
clusterExport(cl, list('datList',  'X', 'iddFun_i', 'datGen_i',
'maxInf_i', 'i'))
resThree <- parLapplyLB(cl, X = 1:3, fun = function(clIdx) {
library(BayesSEIR)
library(splines)
# MCMC specifications
niter <- 8e5
nburn <- 2e5
# set seed for reproducibility of initial values
set.seed(clIdx + i)
# get priors and initial values based on model/data generating scenario
source('get_priors_inits.R')
priorsInits <- get_priors_inits(infPeriodSpec = 'IDD',
iddFun = iddFun_i,
datGen = datGen_i,
maxInf = maxInf_i)
initsList<- priorsInits$initsList
priorList<- priorsInits$priorList
res <- mcmcSEIR(dat = datList, X = X,
inits = initsList,
niter = niter, nburn = nburn,
infPeriodSpec = 'IDD',
priors = priorList,
iddFun = iddFun_i, maxInf = maxInf_i,
EKnown = TRUE, seed = clIdx)
list(fullPost = res)
})
stopCluster(cl)
### post processing to get Gelman-Rubin and IDD curve estimates
postSummaries <- post_processing(modelOutput = resThree, EType = 'known',
infPeriodSpec = "IDD",
datGen = datGen_i, iddFun = iddFun_i,
simNumber = simNumber_i, maxInf = maxInf_i,
X = X, N = N)
postSummaries$gdiag
keepIdx <- seq(1, nrow(resThree[[1]]$fullPost), 100)
par(mfrow = c(2,3))
plot(resThree[[1]]$fullPost[keepIdx,'beta1'], type = 'l')
lines(resThree[[2]]$fullPost[keepIdx,'beta1'], col = 'red')
lines(resThree[[3]]$fullPost[keepIdx,'beta1'], col = 'blue')
plot(resThree[[1]]$fullPost[keepIdx,'beta2'], type = 'l')
lines(resThree[[2]]$fullPost[keepIdx,'beta2'], col = 'red')
lines(resThree[[3]]$fullPost[keepIdx,'beta2'], col = 'blue')
plot(resThree[[1]]$fullPost[keepIdx,'shape'], type = 'l')
lines(resThree[[2]]$fullPost[keepIdx,'shape'], col = 'red')
lines(resThree[[3]]$fullPost[keepIdx,'shape'], col = 'blue')
plot(resThree[[1]]$fullPost[keepIdx,'rate'], type = 'l')
lines(resThree[[2]]$fullPost[keepIdx,'rate'], col = 'red')
lines(resThree[[3]]$fullPost[keepIdx,'rate'], col = 'blue')
plot(resThree[[1]]$fullPost[keepIdx,'rateE'], type = 'l')
lines(resThree[[2]]$fullPost[keepIdx,'rateE'], col = 'red')
lines(resThree[[3]]$fullPost[keepIdx,'rateE'], col = 'blue')
postSummaries$gdiag
