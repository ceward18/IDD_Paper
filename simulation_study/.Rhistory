31/sqrt(32)
30.5/sqrt(31)
pnorm(172, 173.20, 5.48) - pnorm(170, 173.20, 5.48)
30.5/sqrt(32)
pnorm(172, 173.20, 5.39) - pnorm(170, 173.20, 5.39)
27+1.5*25
2-1.5*25
63-
7
56*1.5+63
7-1.5*56
281+1.5*277
4-1.5*277
0.03*0.602 + 0.97*(1-0.969)
0.03*0.602 /0.03*0.602
30.4/sqrt(39)
pnorm(172, 170.2, 4.8679)-pnorm(169, 170.2, 4.8679)
0.03*0.602 /0.04813
166.8321 +25.1890*50
0.1*8 + 40
qunif(0.1)
2.2*5
20.471
20.471*36
install.package('opa')
install.packages('opa')
library(opa)
?opa
dat <- data.frame(group = c("a", "b", "a", "b"),
t1 = c(9, 4, 8, 10),
t2 = c(8, 8, 12, 10),
t3 = c(8, 5, 10, 11))
dat$group <- factor(dat$group, levels = c("a", "b"))
opamod <- opa(dat[,2:4], 1:3)
summary(opamod)
dat <- data.frame(group = c("C", "T", "F"),
t1 = c(9, 8, 8),
t2 = c(4, 8, 5),
t3 = c(10, 12, 10),
t4 = c(8, 10, 11))
dat
dat <- data.frame(subject = 1:4,
t1 = c(9, 4, 10, 8),
t2 = c(8, 8, 12, 10),
t3 = c(8, 5, 10, 11))
dat
dat <- data.frame(subject = 1:4,
Cafe = c(9, 4, 10, 8),
Traffic = c(8, 8, 12, 10),
Foodcourt = c(8, 5, 10, 11))
dat
dat <- data.frame(subject = 1:4,
Cafe = c(9, 4, 10, 8),
Traffic = c(8, 8, 12, 10),
Foodcourt = c(8, 5, 10, 11))
opamod <- opa(dat[,-1], hypothesis = c(1,1,1))
summary(opamod)
dat <- data.frame(subject = 1:4,
Cafe = c(9, 4, 10, 8),
Traffic = c(8, 8, 12, 10),
Foodcourt = c(8, 5, 10, 11))
opamod <- opa(dat[,-1], hypothesis = c(1,3,2))
summary(opamod)
opamod <- opa(dat[,-1], hypothesis = c(1,2,3))
summary(opamod)
opamod <- opa(dat[,-1], hypothesis = c(1,2,3), cval_method = "exact")
summary(opamod)
opamod
opamod$pairing_type
opamod$condition_pccs
8*0.7+8+10+6+8+6*0.25+6+8*.5
49.1/60
library(BayesSEIR)
library(ggplot2)
library(grid)
library(gridExtra)
library(plyr)
library(RColorBrewer)
library(scales)
myTheme <-  theme_bw() +
theme(plot.title = element_text(h = 0.5, size = 16),
legend.title = element_text(size = 14, h = 0.5),
legend.text = element_text(size = 12),
axis.title = element_text(size = 14),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
strip.background=element_rect(fill="white"),
strip.text = element_text(size = 14))
source('../helper_functions.R')
################################################################################
### Combine batch files
batchFiles <- list.files('./output/')
# combine results with est infectious period
batch_i <- readRDS(paste0('./output/', batchFiles[1]))
gdiag <- batch_i$gdiag
paramsSummary <- batch_i$paramsSummary
iddSummary <- batch_i$iddSummary
r0Summary <- batch_i$r0Summary
waicSummary <- batch_i$waicSummary
for (i in 2:length(batchFiles)) {
batch_i <- readRDS(paste0('./output/', batchFiles[i]))
gdiag <-rbind.data.frame(gdiag, batch_i$gdiag)
paramsSummary <-rbind.data.frame(paramsSummary, batch_i$paramsSummary)
iddSummary <-rbind.data.frame(iddSummary, batch_i$iddSummary)
r0Summary <-rbind.data.frame(r0Summary, batch_i$r0Summary)
waicSummary <-rbind.data.frame(waicSummary, batch_i$waicSummary)
}
batchFiles
setwd("C:/Users/caitl/Documents/IDDPaper/IDD_Paper/ebola_analysis")
################################################################################
# Results of the Ebola Analysis
################################################################################
library(BayesSEIR)
library(ggplot2)
library(grid)
library(gridExtra)
library(plyr)
library(RColorBrewer)
library(scales)
myTheme <-  theme_bw() +
theme(plot.title = element_text(h = 0.5, size = 16),
legend.title = element_text(size = 14, h = 0.5),
legend.text = element_text(size = 12),
axis.title = element_text(size = 14),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
strip.background=element_rect(fill="white"),
strip.text = element_text(size = 14))
source('../helper_functions.R')
################################################################################
### Combine batch files
batchFiles <- list.files('./output/')
# combine results with est infectious period
batch_i <- readRDS(paste0('./output/', batchFiles[1]))
gdiag <- batch_i$gdiag
paramsSummary <- batch_i$paramsSummary
iddSummary <- batch_i$iddSummary
r0Summary <- batch_i$r0Summary
waicSummary <- batch_i$waicSummary
for (i in 2:length(batchFiles)) {
batch_i <- readRDS(paste0('./output/', batchFiles[i]))
gdiag <-rbind.data.frame(gdiag, batch_i$gdiag)
paramsSummary <-rbind.data.frame(paramsSummary, batch_i$paramsSummary)
iddSummary <-rbind.data.frame(iddSummary, batch_i$iddSummary)
r0Summary <-rbind.data.frame(r0Summary, batch_i$r0Summary)
waicSummary <-rbind.data.frame(waicSummary, batch_i$waicSummary)
}
# should be 0
sum(gdiag$gr > 1.1)
r0Summary$fitType <- r0Summary$iddFun
r0Summary$fitType[r0Summary$infPeriodSpec == 'exp'] <- 'exp'
r0Summary$fitType[r0Summary$infPeriodSpec == 'PS'] <- 'PS'
r0Summary$fitType <- factor(r0Summary$fitType,
levels = c('exp', 'PS', 'dgammaIDD', 'dlnormIDD',
'logitIDD', 'splineIDD'),
labels = c('Exponential', 'Path-specific',
'IDD - Gamma pdf', 'IDD - Log-normal pdf',
'IDD - Logistic Decay', 'IDD - Basis Spline'))
pal <- brewer.pal(6, 'Set2')
iddSummary <- iddSummary[!is.na(iddSummary$iddFun),]
iddSummary$iddFun <- factor(iddSummary$iddFun,
levels = c('dgammaIDD', 'dlnormIDD',
'logitIDD', 'splineIDD'),
labels = c('Gamma pdf', 'Log-normal pdf',
'Logistic Decay', 'Basis Spline'))
ggplot(iddSummary, aes(x = infDay, y = median,
ymin = lower, ymax = upper,
col = iddFun)) +
geom_line(size= 1.5) +
geom_ribbon(aes(fill = iddFun), alpha = 0.3) +
facet_wrap(~iddFun, nrow = 1) +
myTheme +
labs(x = 'Days Infectious', y = expression(pi[0]^(SE))) +
scale_color_manual(values = pal[-c(1,2)]) +
scale_fill_manual(values = pal[-c(1,2)]) +
guides(fill = 'none', col = 'none') +
ggtitle(expression('Posterior median and 95% CI of '~pi[0]^(SE)))
iddCurvePal <- pal[3:6]
ggplot(iddSummary, aes(x = infDay, y = median,
ymin = lower, ymax = upper,
col = iddFun)) +
geom_line(size= 1.5) +
geom_ribbon(aes(fill = iddFun), alpha = 0.3) +
facet_wrap(~iddFun, nrow = 1) +
myTheme +
labs(x = 'Days Infectious', y = expression(pi[0]^(SE))) +
scale_color_manual(values = iddCurvePal) +
scale_fill_manual(values = iddCurvePal) +
guides(fill = 'none', col = 'none') +
ggtitle(expression('Posterior median and 95% CI of '~pi[0]^(SE)))
pdf('./figures/ebola_iddCurves.pdf', height = 4, width = 10)
ggplot(iddSummary, aes(x = infDay, y = median,
ymin = lower, ymax = upper,
col = iddFun)) +
geom_line(size= 1.5) +
geom_ribbon(aes(fill = iddFun), alpha = 0.3) +
facet_wrap(~iddFun, nrow = 1) +
myTheme +
labs(x = 'Days Infectious', y = expression(pi[0]^(SE))) +
scale_color_manual(values = iddCurvePal) +
scale_fill_manual(values = iddCurvePal) +
guides(fill = 'none', col = 'none') +
ggtitle(expression('Posterior median and 95% CI of '~pi[0]^(SE)))
dev.off()
waicSummary$fitType <- waicSummary$iddFun
waicSummary$fitType[waicSummary$infPeriodSpec == 'exp'] <- 'exp'
waicSummary$fitType[waicSummary$infPeriodSpec == 'PS'] <- 'PS'
waicSummary$fitType <- factor(waicSummary$fitType,
levels = c('exp', 'PS', 'dgammaIDD', 'dlnormIDD',
'logitIDD', 'splineIDD'),
labels = c('Exponential', 'Path-specific',
'Gamma pdf', 'Log-normal pdf',
'Logistic Decay', 'Basis Spline'))
waicSummary[,c('fitType', 'waic')]
paramsSummary$fitType <- paramsSummary$iddFun
paramsSummary$fitType[paramsSummary$infPeriodSpec == 'exp'] <- 'exp'
paramsSummary$fitType[paramsSummary$infPeriodSpec == 'PS'] <- 'PS'
paramsSummary$fitType <- factor(paramsSummary$fitType,
levels = c('exp', 'PS', 'dgammaIDD', 'dlnormIDD',
'logitIDD', 'splineIDD'),
labels = c('Exponential', 'Path-specific',
'Gamma pdf', 'Log-normal pdf',
'Logistic Decay', 'Basis Spline'))
paramsSummary$mean <- round(paramsSummary$mean, 2)
paramsSummary$ci <- paste0('(', round(paramsSummary$lower, 2), ', ',
round(paramsSummary$upper, 2), ')')
paramsSummary[,c('fitType', 'mean', 'ci')]
paramsSummary
paramsSummary[,c('fitType', 'param', 'mean', 'ci')]
curve(dgamma(x, 560, 70))
curve(dgamma(x, 560, 70), from = 0, to = 15)
psProbVec(15, 'gamma', psParams = list(shape = 560, rate = 70))
plot(psProbVec(15, 'gamma', psParams = list(shape = 560, rate = 70)))
plot(psProbVec(15, 'gamma', psParams = list(shape = 56, rate = 7)))
setwd("C:/Users/caitl/Documents/IDDPaper/IDD_Paper/ebola_analysis")
idx <- 6
### load libraries
library(BayesSEIR)
library(parallel)
library(coda)
library(splines)
# source helper functions
source('../helper_functions.R')
source('post_processing.R')
# matrix of 6 models to be run
modelsExpPS <- data.frame(infPeriodSpec = c('exp', 'PS'),
iddFun = NA,
stringsAsFactors = FALSE)
modelsIDD <- data.frame(infPeriodSpec = 'IDD',
iddFun = c('dgammaIDD', 'dlnormIDD', 'logitIDD', 'splineIDD'),
stringsAsFactors = FALSE)
allModels <- rbind.data.frame(modelsExpPS, modelsIDD)
# load data from ABSEIR package
# devtools::install_git("https://github.com/grantbrown/ABSEIR.git")
ebola <- ABSEIR::Kikwit1995
# maximum infectious period length
maxInf <- 21
# trim ebola data to only include maxInf days after last infection time
lastInfTime <- max(which(ebola$Count > 0))
newTime <- lastInfTime + maxInf
ebola <- ebola[1:newTime,]
# format data and initial conditions for modeling
N <- 5363500
E0 <- 3
I0 <- 0
S0 <- N - E0 - I0
ebolaDat <- list(Istar = ebola$Count[-c(1:3)],
S0 = S0,
E0 = E0,
I0 = I0,
N = N)
# format matrix for the intensity process
tau <- length(ebolaDat$Istar)
interventionTime <- which(ebola$Date[-c(1:3)] == as.Date('1995-05-10'))
X <- cbind(1, cumsum(1:tau > interventionTime) / 100)
# obtain model specifications by array parameter
infPeriodSpec <- allModels$infPeriodSpec[idx]
iddFun <- allModels$iddFun[idx]
library(BayesSEIR)
library(splines)
# MCMC specifications
niter <- 600000    # total number of iterations to be run
nburn <- 50000     # number of burn-in iterations to be discarded
# get priors and initial values based on model/data generating scenario
# set seed for reproducibility
set.seed(x + idx)
source('get_priors_inits.R')
priorsInits <- get_priors_inits(infPeriodSpec = infPeriodSpec,
iddFun = iddFun,
maxInf = maxInf)
initsList<- priorsInits$initsList
priorList<- priorsInits$priorList
x <- 1
library(BayesSEIR)
library(splines)
# MCMC specifications
niter <- 600000    # total number of iterations to be run
nburn <- 50000     # number of burn-in iterations to be discarded
# get priors and initial values based on model/data generating scenario
# set seed for reproducibility
set.seed(x + idx)
source('get_priors_inits.R')
priorsInits <- get_priors_inits(infPeriodSpec = infPeriodSpec,
iddFun = iddFun,
maxInf = maxInf)
initsList<- priorsInits$initsList
priorList<- priorsInits$priorList
priorsInits
initsList<- priorsInits$initsList
priorList<- priorsInits$priorList
priorList
diag(c(4, 4, 4, 4, 4, 4))
?dmvnorm
??dmvnorm
set.seed(x)
if (infPeriodSpec == 'exp') {
res <-  mcmcSEIR(dat = ebolaDat, X = X,
inits = initsList,
niter = niter, nburn = nburn,
infPeriodSpec = infPeriodSpec,
priors = priorList,
WAIC = TRUE)
} else if (infPeriodSpec == 'PS') {
res <- mcmcSEIR(dat = ebolaDat, X = X,
inits = initsList,
niter = niter, nburn = nburn,
infPeriodSpec = infPeriodSpec,
priors = priorList,
dist = 'gamma', maxInf = maxInf,
WAIC = TRUE)
} else if (infPeriodSpec == 'IDD') {
res <-  mcmcSEIR(dat = ebolaDat, X = X,
inits = initsList,
niter = niter, nburn = nburn,
infPeriodSpec = infPeriodSpec,
priors = priorList,
iddFun = iddFun, maxInf = maxInf,
WAIC = TRUE)
}
# run three chains in parallel
cl <- makeCluster(3)
clusterExport(cl, list('ebolaDat',  'X', 'infPeriodSpec', 'iddFun', 'maxInf', 'idx'))
resThree <- parLapplyLB(cl, 1:3, function(x) {
library(BayesSEIR)
library(splines)
# MCMC specifications
niter <- 600000    # total number of iterations to be run
nburn <- 50000     # number of burn-in iterations to be discarded
# get priors and initial values based on model/data generating scenario
# set seed for reproducibility
set.seed(x + idx)
source('get_priors_inits.R')
priorsInits <- get_priors_inits(infPeriodSpec = infPeriodSpec,
iddFun = iddFun,
maxInf = maxInf)
initsList<- priorsInits$initsList
priorList<- priorsInits$priorList
set.seed(x)
if (infPeriodSpec == 'exp') {
res <-  mcmcSEIR(dat = ebolaDat, X = X,
inits = initsList,
niter = niter, nburn = nburn,
infPeriodSpec = infPeriodSpec,
priors = priorList,
WAIC = TRUE)
} else if (infPeriodSpec == 'PS') {
res <- mcmcSEIR(dat = ebolaDat, X = X,
inits = initsList,
niter = niter, nburn = nburn,
infPeriodSpec = infPeriodSpec,
priors = priorList,
dist = 'gamma', maxInf = maxInf,
WAIC = TRUE)
} else if (infPeriodSpec == 'IDD') {
res <-  mcmcSEIR(dat = ebolaDat, X = X,
inits = initsList,
niter = niter, nburn = nburn,
infPeriodSpec = infPeriodSpec,
priors = priorList,
iddFun = iddFun, maxInf = maxInf,
WAIC = TRUE)
}
res
})
stopCluster(cl)
postSummaries <- post_processing(modelOutput = resThree, EType = 'estimated',
infPeriodSpec = infPeriodSpec_i,
datGen = datGen_i, iddFun = iddFun_i,
simNumber = simNumber_i, maxInf = maxInf_i,
X = X, N = N)
head(post_processing)
getwd()
setwd("K:/IDD_Paper/simulation_study2")
source('../helper_functions.R')
source('post_processing.R')
postSummaries <- post_processing(modelOutput = resThree, EType = 'estimated',
infPeriodSpec = infPeriodSpec_i,
datGen = datGen_i, iddFun = iddFun_i,
simNumber = simNumber_i, maxInf = maxInf_i,
X = X, N = N)
datGen_i
infPeriodSpec_i
setwd("K:/IDD_Paper/simulation_study2")
setwd("C:/Users/caitl/Documents/IDDPaper/IDD_Paper/ebola_analysis")
# source helper functions
source('../helper_functions.R')
source('post_processing.R')
# get summaries from chains
postSummaries <- post_processing(modelOutput = resThree,
infPeriodSpec = infPeriodSpec, iddFun = iddFun,
maxInf = maxInf, X = X, N = N)
postSummaries$gdiag
plot(resThree[[1]]$fullPost$beta1, type = 'l')
lines(resThree[[1]]$fullPost$beta1, col = 'red')
lines(resThree[[1]]$fullPost$beta1, col = 'blue')
plot(resThree[[1]]$fullPost$beta1, type = 'l')
lines(resThree[[2]]$fullPost$beta1, col = 'red')
lines(resThree[[3]]$fullPost$beta1, col = 'blue')
plot(resThree[[1]]$fullPost$b4, type = 'l')
lines(resThree[[2]]$fullPost$b4, col = 'red')
lines(resThree[[3]]$fullPost$b4, col = 'blue')
plot(resThree[[1]]$fullPost$b4, type = 'l')
lines(resThree[[2]]$fullPost$b4, col = 'red')
lines(resThree[[3]]$fullPost$b4, col = 'blue')
plot(postSummaries$iddSummary$median)
lines(postSummaries$iddSummary$upper, lty = 2)
lines(postSummaries$iddSummary$lower, lty = 2)
debugonce(post_processing)
# get summaries from chains
postSummaries <- post_processing(modelOutput = resThree,
infPeriodSpec = infPeriodSpec, iddFun = iddFun,
maxInf = maxInf, X = X, N = N)
iddParamsPost
head(iddParamsPost)
plot(iddParamsPost$b1)
plot(iddParamsPost$b2)
plot(iddParamsPost$b3)
plot(iddParamsPost$b4)
plot(iddParamsPost$b5)
iddCurveFun
View(getR0())
View(getR0
)
View(getR0IDD)
as.list(iddParamsPost[j,])
beta1Post
setwd("C:/Users/caitl/Documents/IDDPaper/IDD_Paper/simulation_study")
library(BayesSEIR)
library(ggplot2)
library(grid)
library(gridExtra)
library(plyr)
library(RColorBrewer)
library(scales)
myTheme <-  theme_bw() +
theme(plot.title = element_text(h = 0.5, size = 16),
legend.title = element_text(size = 14, h = 0.5),
legend.text = element_text(size = 12),
axis.title = element_text(size = 14),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 12),
strip.background=element_rect(fill="white"),
strip.text = element_text(size = 14))
source('../helper_functions.R')
################################################################################
### Combine batch files
batchFiles <- list.files('./batch_output/')
batchFilesKnown <- batchFiles[grep('knownE', batchFiles)]
batchFilesEst <- batchFiles[grep('estimatedE', batchFiles)]
# combine results with known infectious period
iddCurveKnown <- readRDS(paste0('./batch_output/', batchFilesKnown[1]))
iddCurveKnown$infPeriodSpec <- 'IDD'
for (i in 2:length(batchFilesKnown)) {
knownE_i <- readRDS(paste0('./batch_output/', batchFilesKnown[i]))
if (i %in% c(2, 9:16)) {
knownE_i$infPeriodSpec <- 'IDD'
}
iddCurveKnown <-rbind.data.frame(iddCurveKnown, knownE_i)
}
iddCurveKnown$EstarType <- 'Known'
# combine results with est infectious period
estE_i <- readRDS(paste0('./batch_output/', batchFilesEst[1]))
gdiagEst <- estE_i$gdiagAll
postParamsEst <- estE_i$postParamsAll
iddCurveEst <- estE_i$iddCurveAll
r0Est <- estE_i$r0All
mcmcEffEst <- estE_i$mcmcEffAll
waicEst <- estE_i$waicAll
for (i in 2:length(batchFilesEst)) {
estE_i <- readRDS(paste0('./batch_output/', batchFilesEst[i]))
gdiagEst <-rbind.data.frame(gdiagEst, estE_i$gdiagAll)
postParamsEst <-rbind.data.frame(postParamsEst, estE_i$postParamsAll)
iddCurveEst <-rbind.data.frame(iddCurveEst, estE_i$iddCurveAll)
r0Est <-rbind.data.frame(r0Est, estE_i$r0All)
mcmcEffEst <-rbind.data.frame(mcmcEffEst, estE_i$mcmcEffAll)
waicEst <-rbind.data.frame(waicEst, estE_i$waicAll)
}
gdiagEst$EstarType <- 'Estimated'
postParamsEst$EstarType <- 'Estimated'
iddCurveEst$EstarType <- 'Estimated'
r0Est$EstarType <- 'Estimated'
mcmcEffEst$EstarType <- 'Estimated'
waicEst$EstarType <- 'Estimated'
# combine IDD Curves
iddCurveAll <- rbind.data.frame(
iddCurveKnown[-which(colnames(iddCurveKnown) == 'allConverge')],
iddCurveEst)
# known infectious period
notConvergeKnown <- iddCurveKnown[!iddCurveKnown$allConverge,]
notConvergeKnown <- notConvergeKnown[notConvergeKnown$infDay == 1,]
table(notConvergeKnown$iddFun, notConvergeKnown$datGen, notConvergeKnown$maxInf)
notConvergeKnown
